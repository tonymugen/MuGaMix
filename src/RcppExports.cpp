// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// lpTest
double lpTest(const std::vector<double>& yVec, const std::vector<double>& iSigVec, const std::vector<int32_t>& repFac, const std::vector<int32_t>& lnFac, const std::vector<double>& paramValues, const int32_t& d);
RcppExport SEXP _MuGaMix_lpTest(SEXP yVecSEXP, SEXP iSigVecSEXP, SEXP repFacSEXP, SEXP lnFacSEXP, SEXP paramValuesSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type yVec(yVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type iSigVec(iSigVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type repFac(repFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type lnFac(lnFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type paramValues(paramValuesSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(lpTest(yVec, iSigVec, repFac, lnFac, paramValues, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MuGaMix_lpTest", (DL_FUNC) &_MuGaMix_lpTest, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_MuGaMix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
