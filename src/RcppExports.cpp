// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// lpTestL
double lpTestL(const std::vector<double>& yVec, const std::vector<double>& iSigVec, const std::vector<int32_t>& repFac, const std::vector<int32_t>& lnFac, const std::vector<double>& paramValues, const int32_t& d);
RcppExport SEXP _MuGaMix_lpTestL(SEXP yVecSEXP, SEXP iSigVecSEXP, SEXP repFacSEXP, SEXP lnFacSEXP, SEXP paramValuesSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type yVec(yVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type iSigVec(iSigVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type repFac(repFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type lnFac(lnFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type paramValues(paramValuesSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(lpTestL(yVec, iSigVec, repFac, lnFac, paramValues, d));
    return rcpp_result_gen;
END_RCPP
}
// gradTestL
double gradTestL(const std::vector<double>& yVec, const std::vector<double>& iSigVec, const std::vector<int32_t>& repFac, const std::vector<int32_t>& lnFac, const std::vector<double>& paramValues, const int32_t& d, const int32_t& idx);
RcppExport SEXP _MuGaMix_gradTestL(SEXP yVecSEXP, SEXP iSigVecSEXP, SEXP repFacSEXP, SEXP lnFacSEXP, SEXP paramValuesSEXP, SEXP dSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type yVec(yVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type iSigVec(iSigVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type repFac(repFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type lnFac(lnFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type paramValues(paramValuesSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(gradTestL(yVec, iSigVec, repFac, lnFac, paramValues, d, idx));
    return rcpp_result_gen;
END_RCPP
}
// testInitTheta
Rcpp::List testInitTheta(const std::vector<double>& yVec, const std::vector<double>& trueISigVec, const std::vector<int32_t>& lnFac, const std::vector<int32_t>& popFac, const int32_t& Npop, const int32_t& d);
RcppExport SEXP _MuGaMix_testInitTheta(SEXP yVecSEXP, SEXP trueISigVecSEXP, SEXP lnFacSEXP, SEXP popFacSEXP, SEXP NpopSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type yVec(yVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type trueISigVec(trueISigVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type lnFac(lnFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type popFac(popFacSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type Npop(NpopSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(testInitTheta(yVec, trueISigVec, lnFac, popFac, Npop, d));
    return rcpp_result_gen;
END_RCPP
}
// testLocSampler
Rcpp::List testLocSampler(const std::vector<double>& yVec, const std::vector<double>& trueISigVec, const std::vector<int32_t>& lnFac, const std::vector<int32_t>& popFac, const int32_t& Npop, const int32_t& d, const int32_t& Nadapt, const int32_t& Nsamp);
RcppExport SEXP _MuGaMix_testLocSampler(SEXP yVecSEXP, SEXP trueISigVecSEXP, SEXP lnFacSEXP, SEXP popFacSEXP, SEXP NpopSEXP, SEXP dSEXP, SEXP NadaptSEXP, SEXP NsampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type yVec(yVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type trueISigVec(trueISigVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type lnFac(lnFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type popFac(popFacSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type Npop(NpopSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type Nadapt(NadaptSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type Nsamp(NsampSEXP);
    rcpp_result_gen = Rcpp::wrap(testLocSampler(yVec, trueISigVec, lnFac, popFac, Npop, d, Nadapt, Nsamp));
    return rcpp_result_gen;
END_RCPP
}
// lpTestS
double lpTestS(const std::vector<double>& yVec, const std::vector<double>& iSigVec, const std::vector<int32_t>& repFac, const std::vector<int32_t>& lnFac, const std::vector<double>& paramValues, const int32_t& d);
RcppExport SEXP _MuGaMix_lpTestS(SEXP yVecSEXP, SEXP iSigVecSEXP, SEXP repFacSEXP, SEXP lnFacSEXP, SEXP paramValuesSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type yVec(yVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type iSigVec(iSigVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type repFac(repFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type lnFac(lnFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type paramValues(paramValuesSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(lpTestS(yVec, iSigVec, repFac, lnFac, paramValues, d));
    return rcpp_result_gen;
END_RCPP
}
// gradTestS
double gradTestS(const std::vector<double>& yVec, const std::vector<double>& iSigVec, const std::vector<int32_t>& repFac, const std::vector<int32_t>& lnFac, const std::vector<double>& paramValues, const int32_t& d, const int32_t& idx);
RcppExport SEXP _MuGaMix_gradTestS(SEXP yVecSEXP, SEXP iSigVecSEXP, SEXP repFacSEXP, SEXP lnFacSEXP, SEXP paramValuesSEXP, SEXP dSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type yVec(yVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type iSigVec(iSigVecSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type repFac(repFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<int32_t>& >::type lnFac(lnFacSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type paramValues(paramValuesSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(gradTestS(yVec, iSigVec, repFac, lnFac, paramValues, d, idx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MuGaMix_lpTestL", (DL_FUNC) &_MuGaMix_lpTestL, 6},
    {"_MuGaMix_gradTestL", (DL_FUNC) &_MuGaMix_gradTestL, 7},
    {"_MuGaMix_testInitTheta", (DL_FUNC) &_MuGaMix_testInitTheta, 6},
    {"_MuGaMix_testLocSampler", (DL_FUNC) &_MuGaMix_testLocSampler, 8},
    {"_MuGaMix_lpTestS", (DL_FUNC) &_MuGaMix_lpTestS, 6},
    {"_MuGaMix_gradTestS", (DL_FUNC) &_MuGaMix_gradTestS, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_MuGaMix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
